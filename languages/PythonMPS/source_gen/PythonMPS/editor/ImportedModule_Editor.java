package PythonMPS.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import javax.swing.JButton;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.smodel.ModelAccess;
import PythonMPS.behavior.ImportedModule__BehaviorDescriptor;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class ImportedModule_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_rcto1q_a(editorContext, node);
  }
  private EditorCell createCollection_rcto1q_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_rcto1q_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createJComponent_rcto1q_a0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_rcto1q_b0(editorContext, node));
    return editorCell;
  }
  private EditorCell createJComponent_rcto1q_a0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, ImportedModule_Editor._QueryFunction_JComponent_rcto1q_a0a(node, editorContext), "_rcto1q_a0");
    editorCell.setCellId("JComponent_rcto1q_a0");
    return editorCell;
  }
  private static JComponent _QueryFunction_JComponent_rcto1q_a0a(final SNode node, final EditorContext editorContext) {
    final JButton button = new JButton((SPropertyOperations.getBoolean(node, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a748dbd1L, "open")) ? "-" : "+"));
    button.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            if (!(SPropertyOperations.getBoolean(node, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a736d426L, "imported")))) {
              ImportedModule__BehaviorDescriptor.importContentsAndSubModules_id4O4oHuBdHit.invoke(node);
            }
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a748dbd1L, "open"), "" + (!(SPropertyOperations.getBoolean(node, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a748dbd1L, "open")))));
            button.setText((SPropertyOperations.getBoolean(node, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a748dbd1L, "open")) ? "-" : "+"));
          }
        });
      }
    });
    return button;
  }
  private EditorCell createCollection_rcto1q_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_rcto1q_b0");
    editorCell.addEditorCell(this.createCollection_rcto1q_a1a(editorContext, node));
    if (renderingCondition_rcto1q_a1b0(node, editorContext)) {
      editorCell.addEditorCell(this.createCollection_rcto1q_b1a(editorContext, node));
    }
    return editorCell;
  }
  private EditorCell createCollection_rcto1q_a1a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_rcto1q_a1a");
    editorCell.addEditorCell(this.createConstant_rcto1q_a0b0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_rcto1q_b0b0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_rcto1q_a0b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "module");
    editorCell.setCellId("Constant_rcto1q_a0b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_rcto1q_b0b0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_rcto1q_b1a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_rcto1q_b1a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createCollection_rcto1q_a1b0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_rcto1q_b1b0(editorContext, node));
    return editorCell;
  }
  private static boolean renderingCondition_rcto1q_a1b0(SNode node, EditorContext editorContext) {
    return SPropertyOperations.getBoolean(node, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a748dbd1L, "open"));
  }
  private EditorCell createCollection_rcto1q_a1b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_rcto1q_a1b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_rcto1q_a0b1a(editorContext, node));
    editorCell.addEditorCell(this.createRefNodeList_rcto1q_b0b1a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_rcto1q_a0b1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "submodules:");
    editorCell.setCellId("Constant_rcto1q_a0b1a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNodeList_rcto1q_b0b1a(EditorContext editorContext, SNode node) {
    AbstractCellListHandler handler = new ImportedModule_Editor.submodulesListHandler_rcto1q_b0b1a(node, "submodules", editorContext);
    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_submodules");
    editorCell.setRole(handler.getElementRole());
    return editorCell;
  }
  private static class submodulesListHandler_rcto1q_b0b1a extends RefNodeListHandler {
    public submodulesListHandler_rcto1q_b0b1a(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }
    public SNode createNodeToInsert(EditorContext editorContext) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, editorContext, super.getElementRole());
    }
    public EditorCell createNodeCell(EditorContext editorContext, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(editorContext, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, editorContext);
      return elementCell;
    }
    public EditorCell createEmptyCell(EditorContext editorContext) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(editorContext);
      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);
      return emptyCell;
    }
    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext editorContext) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        if (elementNode != null) {
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), editorContext));
        }
      }
    }
  }
  private EditorCell createCollection_rcto1q_b1b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_rcto1q_b1b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createRefNodeList_rcto1q_a1b1a(editorContext, node));
    return editorCell;
  }
  private EditorCell createRefNodeList_rcto1q_a1b1a(EditorContext editorContext, SNode node) {
    AbstractCellListHandler handler = new ImportedModule_Editor.contentsListHandler_rcto1q_a1b1a(node, "contents", editorContext);
    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_contents");
    editorCell.setRole(handler.getElementRole());
    return editorCell;
  }
  private static class contentsListHandler_rcto1q_a1b1a extends RefNodeListHandler {
    public contentsListHandler_rcto1q_a1b1a(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }
    public SNode createNodeToInsert(EditorContext editorContext) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, editorContext, super.getElementRole());
    }
    public EditorCell createNodeCell(EditorContext editorContext, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(editorContext, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, editorContext);
      return elementCell;
    }
    public EditorCell createEmptyCell(EditorContext editorContext) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(editorContext);
      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);
      return emptyCell;
    }
    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext editorContext) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        if (elementNode != null) {
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
        if (elementCell.getSubstituteInfo() == null || elementCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
          elementCell.setSubstituteInfo(new DefaultChildSubstituteInfo(listOwner, elementNode, super.getLinkDeclaration(), editorContext));
        }
      }
    }
  }
}
