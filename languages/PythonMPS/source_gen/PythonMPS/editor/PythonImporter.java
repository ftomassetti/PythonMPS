package PythonMPS.editor;

/*Generated by MPS */

import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.ParserRuleContext;
import me.tomassetti.pythonast.parser.Python3Parser;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.antlr.v4.runtime.tree.TerminalNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import me.tomassetti.pythonast.ParserFacade;
import java.io.File;
import org.antlr.v4.runtime.tree.TerminalNodeImpl;
import me.tomassetti.pythonast.parser.Python3Lexer;
import java.io.IOException;

public class PythonImporter {
  private static String describe(ParseTree parseTree) {
    if (parseTree instanceof ParserRuleContext) {
      return describe(((ParserRuleContext) parseTree));
    }
    return parseTree.getClass().getSimpleName();
  }

  private static String describe(ParserRuleContext ctx) {
    String ruleName = Python3Parser.ruleNames[ctx.getRuleIndex()];
    String res = ruleName + "(";
    for (int i = 0; i < ctx.getChildCount(); i++) {
      if (i != 0) {
        res += ", ";
      }
      res += describe(ctx.getChild(i));
    }
    res += ")";
    return res;
  }

  private static SNode toModule(Python3Parser.Dotted_as_namesContext ctx) {
    System.out.println("Producing module name from " + ctx.getText() + ", parts " + ctx.dotted_as_name().size());

    SNode module = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba20L, "PythonMPS.structure.Module")));
    for (Python3Parser.Dotted_as_nameContext piece : ListSequence.fromList(ctx.dotted_as_name())) {
      System.out.println("Producing module name from piece " + piece.getText());
      for (TerminalNode name : ListSequence.fromList(piece.dotted_name().NAME())) {
        SNode s = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba21L, "PythonMPS.structure.ModuleSection")));
        SPropertyOperations.set(s, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba21L, 0x4d7f2c2bf32cba22L, "name"), name.getText());
        ListSequence.fromList(SLinkOperations.getChildren(module, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba20L, 0x4d7f2c2bf32cba24L, "sections"))).addElement(s);
      }

    }
    return module;
  }
  private static SNode toModuleWithAlias(Python3Parser.Dotted_as_namesContext ctx) {
    SNode moduleWithAlias = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x5c44edd50d58f7d5L, "PythonMPS.structure.ModuleWithAlias")));
    SLinkOperations.setTarget(moduleWithAlias, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x5c44edd50d58f7d5L, 0x5c44edd50d58f7d6L, "module"), toModule(ctx));
    return moduleWithAlias;
  }


  private static SNode toModule(Python3Parser.Dotted_nameContext ctx) {

    SNode module = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba20L, "PythonMPS.structure.Module")));
    for (TerminalNode name : ListSequence.fromList(ctx.NAME())) {
      SNode s = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba21L, "PythonMPS.structure.ModuleSection")));
      SPropertyOperations.set(s, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba21L, 0x4d7f2c2bf32cba22L, "name"), name.getText());
      ListSequence.fromList(SLinkOperations.getChildren(module, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba20L, 0x4d7f2c2bf32cba24L, "sections"))).addElement(s);
    }
    return module;
  }
  private static SNode toSymbols(List<SNode> symbols, Python3Parser.Import_as_namesContext ctx) {

    SNode module = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba20L, "PythonMPS.structure.Module")));
    for (Python3Parser.Import_as_nameContext name : ListSequence.fromList(ctx.import_as_name())) {
      SNode symbol = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba1bL, "PythonMPS.structure.ImportedSymbol")));
      SPropertyOperations.set(symbol, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba1bL, 0x4d7f2c2bf32cba1cL, "name"), name.getText());
      ListSequence.fromList(symbols).addElement(symbol);
    }
    return module;
  }



  private static SNode processStatement(ParserRuleContext ctx) {
    if (ctx.getChildCount() == 1 && ctx.getChild(0) instanceof ParserRuleContext) {
      return processStatement(((ParserRuleContext) ctx.getChild(0)));
    }
    if (ctx.getRuleIndex() == Python3Parser.RULE_stmt) {
      return processStatement(((ParserRuleContext) ctx.getChild(0)));
    }
    if (ctx.getRuleIndex() == Python3Parser.RULE_simple_stmt) {
      return processStatement(((ParserRuleContext) ctx.getChild(0)));
    }
    if (ctx.getRuleIndex() == Python3Parser.RULE_small_stmt) {
      return processStatement(((ParserRuleContext) ctx.getChild(0)));
    }

    if (ctx.getRuleIndex() == Python3Parser.RULE_compound_stmt) {
      return processStatement(((ParserRuleContext) ctx.getChild(0)));
    }
    if (ctx.getRuleIndex() == Python3Parser.RULE_import_name) {
      Python3Parser.Import_nameContext astNode = ((Python3Parser.Import_nameContext) ctx);
      SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba09L, "PythonMPS.structure.FileImport")));
      ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba09L, 0x5c44edd50d58f7d3L, "modules"))).addElement(toModuleWithAlias(astNode.dotted_as_names()));
      return node;
    }
    if (ctx.getRuleIndex() == Python3Parser.RULE_import_from) {
      Python3Parser.Import_fromContext astNode = ((Python3Parser.Import_fromContext) ctx);
      SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba0aL, "PythonMPS.structure.SymbolImport")));
      SLinkOperations.setTarget(node, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba0aL, 0x5c44edd50d5962d8L, "module"), toModule(astNode.dotted_name()));
      toSymbols(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba0aL, 0x4d7f2c2bf32cba1eL, "symbols")), astNode.import_as_names());
      return node;
    }
    if (ctx.getRuleIndex() == Python3Parser.RULE_classdef) {
      SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x5c44edd50d531db7L, "PythonMPS.structure.ClassDefinition")));
      Python3Parser.ClassdefContext astNode = ((Python3Parser.ClassdefContext) ctx);
      SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x5c44edd50d531db7L, 0x5c44edd50d531db8L, "name"), astNode.NAME().getText());
      if (astNode.suite().simple_stmt() != null) {
        ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x5c44edd50d531db7L, 0x5c44edd50d531dbaL, "statements"))).addElement(processStatement(astNode.suite().simple_stmt()));
      } else {
        for (Python3Parser.StmtContext stmt : ListSequence.fromList(astNode.suite().stmt())) {
          ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x5c44edd50d531db7L, 0x5c44edd50d531dbaL, "statements"))).addElement(processStatement(stmt));
        }
      }

      return node;
    }

    if (ctx.getRuleIndex() == Python3Parser.RULE_funcdef) {
      Python3Parser.FuncdefContext astNode = ((Python3Parser.FuncdefContext) ctx);
      SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x604e8d2cb3e47975L, "PythonMPS.structure.FunctionDefinition")));
      SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x604e8d2cb3e47975L, 0x604e8d2cb3e47978L, "name"), astNode.NAME().toString());
      return node;
    } else {
      SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x604e8d2cb3e8d5deL, "PythonMPS.structure.UnrecognizedStatement")));
      SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x604e8d2cb3e8d5deL, 0x4ca71366a551a0e0L, "ruleName"), Python3Parser.ruleNames[ctx.getRuleIndex()]);
      SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x604e8d2cb3e8d5deL, 0x6582ace04d0719e8L, "description"), describe(ctx));
      return node;
    }
  }



  public static void importFile(String filename, SNode node) {
    try {
      Python3Parser.File_inputContext root = new ParserFacade().parse(new File(filename));
      for (int i = 0; i < root.getChildCount(); i++) {
        if (root.getChild(i) instanceof ParserRuleContext) {
          ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba08L, 0x4d7f2c2bf32cba19L, "elements"))).addElement(processStatement(((ParserRuleContext) root.getChild(i))));
        } else {
          if (root.getChild(i) instanceof TerminalNodeImpl) {
            TerminalNode terminal = ((TerminalNodeImpl) root.getChild(i));
            if (terminal.getSymbol().getType() != Python3Lexer.EOF) {
              System.out.println("NOT SURE WHAT TO DO WITH " + root.getChild(i).getClass().getCanonicalName());
            }
          } else {
            System.out.println("NOT SURE WHAT TO DO WITH " + root.getChild(i).getClass().getCanonicalName());
          }
        }

      }

    } catch (IOException e) {
      // logging would be nice... 
    }
  }

}
