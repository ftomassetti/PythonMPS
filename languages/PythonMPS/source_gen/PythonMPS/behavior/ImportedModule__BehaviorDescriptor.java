package PythonMPS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import PythonRuntime.code.PythonModulesImporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class ImportedModule__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.ImportedModule");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Void> importContentsAndSubModules_id4O4oHuBdHit = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("importContentsAndSubModules").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4O4oHuBdHit").registry(REGISTRY).build();
  /*package*/ static final SMethod<Integer> nbOfLevel_id4O4oHuBfDMu = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("nbOfLevel").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("4O4oHuBfDMu").registry(REGISTRY).build();
  public static final SMethod<SNode> getSubmoduleBySimpleName_id4O4oHuBfMhF = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getSubmoduleBySimpleName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4O4oHuBfMhF").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<SNode> getSubmoduleByQname_id4O4oHuBgwVV = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getSubmoduleByQname").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4O4oHuBgwVV").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  /*package*/ static final SMethod<SNode> getOrCreateSubmoduleByQname_id4O4oHuBfLxK = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getOrCreateSubmoduleByQname").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("4O4oHuBfLxK").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  /*package*/ static final SMethod<SNode> getOrCreateSubmoduleBySimpleName_id4O4oHuBh8P5 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getOrCreateSubmoduleBySimpleName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("4O4oHuBh8P5").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Void> createSubmoduleByQname_id4O4oHuBfALD = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("createSubmoduleByQname").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4O4oHuBfALD").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<List<SNode>> contents_id4O4oHuBhrh9 = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("contents").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4O4oHuBhrh9").registry(REGISTRY).build();
  public static final SMethod<List<SNode>> subModules_id4O4oHuBhrhx = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("subModules").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4O4oHuBhrhx").registry(REGISTRY).build();
  public static final SMethod<SNode> container_id4O4oHuBhqv4 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("container").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4O4oHuBhqv4").registry(REGISTRY).build();
  /*package*/ static final SMethod<Void> createSubmoduleBySimpleName_id4O4oHuBgrqH = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("createSubmoduleBySimpleName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("4O4oHuBgrqH").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(importContentsAndSubModules_id4O4oHuBdHit, nbOfLevel_id4O4oHuBfDMu, getSubmoduleBySimpleName_id4O4oHuBfMhF, getSubmoduleByQname_id4O4oHuBgwVV, getOrCreateSubmoduleByQname_id4O4oHuBfLxK, getOrCreateSubmoduleBySimpleName_id4O4oHuBh8P5, createSubmoduleByQname_id4O4oHuBfALD, contents_id4O4oHuBhrh9, subModules_id4O4oHuBhrhx, container_id4O4oHuBhqv4, createSubmoduleBySimpleName_id4O4oHuBgrqH);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void importContentsAndSubModules_id4O4oHuBdHit(@NotNull SNode __thisNode__) {
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a7477dceL, "submodules"))).clear();
    new PythonModulesImporter().importSubModules(__thisNode__);
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a736d428L, "contents"))).clear();
    new PythonModulesImporter().importModuleContents(__thisNode__);
    SPropertyOperations.set(__thisNode__, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a736d426L, "imported"), "" + (true));
  }
  /*package*/ static int nbOfLevel_id4O4oHuBfDMu(@NotNull SNode __thisNode__) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(__thisNode__), MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.ImportedModule"))) {
      return 1 + (int) ImportedModule__BehaviorDescriptor.nbOfLevel_id4O4oHuBfDMu.invoke(SNodeOperations.cast(SNodeOperations.getParent(__thisNode__), MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.ImportedModule")));
    }

    return 0;
  }
  /*package*/ static SNode getSubmoduleBySimpleName_id4O4oHuBfMhF(@NotNull SNode __thisNode__, final String name) {
    if (name.contains(".")) {
      throw new IllegalArgumentException();
    }
    return SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a7477dceL, "submodules"))).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.ImportedModule")) && SPropertyOperations.getString(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.ImportedModule")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).equals(name);
      }
    }), MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.ImportedModule"));
  }
  /*package*/ static SNode getSubmoduleByQname_id4O4oHuBgwVV(@NotNull SNode __thisNode__, final String qname) {
    return SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a7477dceL, "submodules"))).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.ImportedModule")) && IQNamedConcept__BehaviorDescriptor.qualifiedName_id4O4oHuBhqvf.invoke(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.ImportedModule"))).equals(qname);
      }
    }), MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.ImportedModule"));
  }
  /*package*/ static SNode getOrCreateSubmoduleByQname_id4O4oHuBfLxK(@NotNull SNode __thisNode__, String name) {
    if (ImportedModule__BehaviorDescriptor.getSubmoduleByQname_id4O4oHuBgwVV.invoke(__thisNode__, name) == null) {
      ImportedModule__BehaviorDescriptor.createSubmoduleByQname_id4O4oHuBfALD.invoke(__thisNode__, name);
    }
    return ImportedModule__BehaviorDescriptor.getSubmoduleByQname_id4O4oHuBgwVV.invoke(__thisNode__, name);
  }
  /*package*/ static SNode getOrCreateSubmoduleBySimpleName_id4O4oHuBh8P5(@NotNull SNode __thisNode__, String name) {
    if (name.contains(".")) {
      throw new IllegalArgumentException();
    }
    if (ImportedModule__BehaviorDescriptor.getSubmoduleBySimpleName_id4O4oHuBfMhF.invoke(__thisNode__, name) == null) {
      ImportedModule__BehaviorDescriptor.createSubmoduleBySimpleName_id4O4oHuBgrqH.invoke(__thisNode__, name);
    }
    return ImportedModule__BehaviorDescriptor.getSubmoduleBySimpleName_id4O4oHuBfMhF.invoke(__thisNode__, name);
  }
  /*package*/ static void createSubmoduleByQname_id4O4oHuBfALD(@NotNull SNode __thisNode__, String qname) {
    if (!(qname.startsWith(IQNamedConcept__BehaviorDescriptor.qualifiedName_id4O4oHuBhqvf.invoke(__thisNode__) + "."))) {
      throw new RuntimeException("Subpackage " + qname + " cannot be assigned to " + IQNamedConcept__BehaviorDescriptor.qualifiedName_id4O4oHuBhqvf.invoke(__thisNode__));
    }
    int level = qname.split("\\.").length - 1;


    if (level == ((int) ImportedModule__BehaviorDescriptor.nbOfLevel_id4O4oHuBfDMu.invoke(__thisNode__)) + 1) {

      ImportedModule__BehaviorDescriptor.createSubmoduleBySimpleName_id4O4oHuBgrqH.invoke(__thisNode__, qname.split("\\.")[level]);
    } else {
      ImportedModule__BehaviorDescriptor.createSubmoduleByQname_id4O4oHuBfALD.invoke(ImportedModule__BehaviorDescriptor.getOrCreateSubmoduleBySimpleName_id4O4oHuBh8P5.invoke(__thisNode__, qname.split("\\.")[((int) ImportedModule__BehaviorDescriptor.nbOfLevel_id4O4oHuBfDMu.invoke(__thisNode__)) + 1]), qname);
    }
  }
  /*package*/ static List<SNode> contents_id4O4oHuBhrh9(@NotNull SNode __thisNode__) {
    return SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a736d428L, "contents"));
  }
  /*package*/ static List<SNode> subModules_id4O4oHuBhrhx(@NotNull SNode __thisNode__) {
    return SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a7477dceL, "submodules"));
  }
  /*package*/ static SNode container_id4O4oHuBhqv4(@NotNull SNode __thisNode__) {
    if (SNodeOperations.getParent(__thisNode__) != null && SNodeOperations.isInstanceOf(SNodeOperations.getParent(__thisNode__), MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.ImportedModule"))) {
      return SNodeOperations.cast(SNodeOperations.getParent(__thisNode__), MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.ImportedModule"));
    } else {
      return null;
    }
  }
  /*package*/ static void createSubmoduleBySimpleName_id4O4oHuBgrqH(@NotNull SNode __thisNode__, String name) {
    if (name.contains(".")) {
      throw new IllegalArgumentException();
    }
    SNode subpack = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.ImportedModule")));
    SPropertyOperations.set(subpack, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), name);
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a7477dceL, "submodules"))).addElement(subpack);
  }

  /*package*/ ImportedModule__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        importContentsAndSubModules_id4O4oHuBdHit(node);
        return null;
      case 1:
        return (T) ((Integer) nbOfLevel_id4O4oHuBfDMu(node));
      case 2:
        return (T) ((SNode) getSubmoduleBySimpleName_id4O4oHuBfMhF(node, (String) parameters[0]));
      case 3:
        return (T) ((SNode) getSubmoduleByQname_id4O4oHuBgwVV(node, (String) parameters[0]));
      case 4:
        return (T) ((SNode) getOrCreateSubmoduleByQname_id4O4oHuBfLxK(node, (String) parameters[0]));
      case 5:
        return (T) ((SNode) getOrCreateSubmoduleBySimpleName_id4O4oHuBh8P5(node, (String) parameters[0]));
      case 6:
        createSubmoduleByQname_id4O4oHuBfALD(node, (String) parameters[0]);
        return null;
      case 7:
        return (T) ((List<SNode>) contents_id4O4oHuBhrh9(node));
      case 8:
        return (T) ((List<SNode>) subModules_id4O4oHuBhrhx(node));
      case 9:
        return (T) ((SNode) container_id4O4oHuBhqv4(node));
      case 10:
        createSubmoduleBySimpleName_id4O4oHuBgrqH(node, (String) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
