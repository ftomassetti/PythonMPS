package PythonMPS.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import PythonRuntime.code.PythonPackagesImporter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Package__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.Package");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Void> importContents_id4O4oHuBdHit = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("importContents").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4O4oHuBdHit").registry(REGISTRY).build();
  public static final SMethod<String> qualifiedName_id4O4oHuBfhpJ = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("qualifiedName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4O4oHuBfhpJ").registry(REGISTRY).build();
  /*package*/ static final SMethod<Integer> nbOfLevel_id4O4oHuBfDMu = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("nbOfLevel").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("4O4oHuBfDMu").registry(REGISTRY).build();
  public static final SMethod<SNode> getSubpackage_id4O4oHuBfMhF = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getSubpackage").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4O4oHuBfMhF").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<SNode> getSubpackageByQname_id4O4oHuBgwVV = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getSubpackageByQname").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4O4oHuBgwVV").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  /*package*/ static final SMethod<SNode> getOrCreateSubpackageByQname_id4O4oHuBfLxK = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getOrCreateSubpackageByQname").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("4O4oHuBfLxK").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  /*package*/ static final SMethod<SNode> getOrCreateSubpackage_id4O4oHuBh8P5 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getOrCreateSubpackage").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("4O4oHuBh8P5").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Void> createSubpackageByQname_id4O4oHuBfALD = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("createSubpackageByQname").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4O4oHuBfALD").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  /*package*/ static final SMethod<Void> createSubpackage_id4O4oHuBgrqH = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("createSubpackage").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("4O4oHuBgrqH").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(importContents_id4O4oHuBdHit, qualifiedName_id4O4oHuBfhpJ, nbOfLevel_id4O4oHuBfDMu, getSubpackage_id4O4oHuBfMhF, getSubpackageByQname_id4O4oHuBgwVV, getOrCreateSubpackageByQname_id4O4oHuBfLxK, getOrCreateSubpackage_id4O4oHuBh8P5, createSubpackageByQname_id4O4oHuBfALD, createSubpackage_id4O4oHuBgrqH);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void importContents_id4O4oHuBdHit(@NotNull SNode __thisNode__) {
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a736d428L, "contents"))).clear();
    new PythonPackagesImporter().importSubPackages(__thisNode__);
    new PythonPackagesImporter().importPackageContents(__thisNode__);
    SPropertyOperations.set(__thisNode__, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a736d426L, "imported"), "" + (true));
  }
  /*package*/ static String qualifiedName_id4O4oHuBfhpJ(@NotNull SNode __thisNode__) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(__thisNode__), MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.Package"))) {
      return Package__BehaviorDescriptor.qualifiedName_id4O4oHuBfhpJ.invoke(SNodeOperations.cast(SNodeOperations.getParent(__thisNode__), MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.Package"))) + "." + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
    }
    return SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
  }
  /*package*/ static int nbOfLevel_id4O4oHuBfDMu(@NotNull SNode __thisNode__) {
    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(__thisNode__), MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.Package"))) {
      return 1 + (int) Package__BehaviorDescriptor.nbOfLevel_id4O4oHuBfDMu.invoke(SNodeOperations.cast(SNodeOperations.getParent(__thisNode__), MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.Package")));
    }

    return 0;
  }
  /*package*/ static SNode getSubpackage_id4O4oHuBfMhF(@NotNull SNode __thisNode__, final String name) {
    return SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a736d428L, "contents"))).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.Package")) && SPropertyOperations.getString(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.Package")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).equals(name);
      }
    }), MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.Package"));
  }
  /*package*/ static SNode getSubpackageByQname_id4O4oHuBgwVV(@NotNull SNode __thisNode__, final String qname) {
    return SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a736d428L, "contents"))).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.Package")) && Package__BehaviorDescriptor.qualifiedName_id4O4oHuBfhpJ.invoke(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.Package"))).equals(qname);
      }
    }), MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.Package"));
  }
  /*package*/ static SNode getOrCreateSubpackageByQname_id4O4oHuBfLxK(@NotNull SNode __thisNode__, String name) {
    if (Package__BehaviorDescriptor.getSubpackageByQname_id4O4oHuBgwVV.invoke(__thisNode__, name) == null) {
      Package__BehaviorDescriptor.createSubpackageByQname_id4O4oHuBfALD.invoke(__thisNode__, name);
    }
    return Package__BehaviorDescriptor.getSubpackageByQname_id4O4oHuBgwVV.invoke(__thisNode__, name);
  }
  /*package*/ static SNode getOrCreateSubpackage_id4O4oHuBh8P5(@NotNull SNode __thisNode__, String name) {
    if (Package__BehaviorDescriptor.getSubpackage_id4O4oHuBfMhF.invoke(__thisNode__, name) == null) {
      Package__BehaviorDescriptor.createSubpackage_id4O4oHuBgrqH.invoke(__thisNode__, name);
    }
    return Package__BehaviorDescriptor.getSubpackage_id4O4oHuBfMhF.invoke(__thisNode__, name);
  }
  /*package*/ static void createSubpackageByQname_id4O4oHuBfALD(@NotNull SNode __thisNode__, String qname) {
    if (!(qname.startsWith(Package__BehaviorDescriptor.qualifiedName_id4O4oHuBfhpJ.invoke(__thisNode__) + "."))) {
      throw new RuntimeException("Subpackage " + qname + " cannot be assigned to " + Package__BehaviorDescriptor.qualifiedName_id4O4oHuBfhpJ.invoke(__thisNode__));
    }
    int level = qname.split("\\.").length - 1;


    if (level == ((int) Package__BehaviorDescriptor.nbOfLevel_id4O4oHuBfDMu.invoke(__thisNode__)) + 1) {

      Package__BehaviorDescriptor.createSubpackage_id4O4oHuBgrqH.invoke(__thisNode__, qname.split("\\.")[level]);
    } else {
      Package__BehaviorDescriptor.createSubpackageByQname_id4O4oHuBfALD.invoke(Package__BehaviorDescriptor.getOrCreateSubpackage_id4O4oHuBh8P5.invoke(__thisNode__, qname.split("\\.")[((int) Package__BehaviorDescriptor.nbOfLevel_id4O4oHuBfDMu.invoke(__thisNode__)) + 1]), qname);
    }
  }
  /*package*/ static void createSubpackage_id4O4oHuBgrqH(@NotNull SNode __thisNode__, String name) {
    SNode subpack = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.Package")));
    SPropertyOperations.set(subpack, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), name);
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, 0x4d0462d7a736d428L, "contents"))).addElement(subpack);
  }

  /*package*/ Package__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        importContents_id4O4oHuBdHit(node);
        return null;
      case 1:
        return (T) ((String) qualifiedName_id4O4oHuBfhpJ(node));
      case 2:
        return (T) ((Integer) nbOfLevel_id4O4oHuBfDMu(node));
      case 3:
        return (T) ((SNode) getSubpackage_id4O4oHuBfMhF(node, (String) parameters[0]));
      case 4:
        return (T) ((SNode) getSubpackageByQname_id4O4oHuBgwVV(node, (String) parameters[0]));
      case 5:
        return (T) ((SNode) getOrCreateSubpackageByQname_id4O4oHuBfLxK(node, (String) parameters[0]));
      case 6:
        return (T) ((SNode) getOrCreateSubpackage_id4O4oHuBh8P5(node, (String) parameters[0]));
      case 7:
        createSubpackageByQname_id4O4oHuBfALD(node, (String) parameters[0]);
        return null;
      case 8:
        createSubpackage_id4O4oHuBgrqH(node, (String) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
