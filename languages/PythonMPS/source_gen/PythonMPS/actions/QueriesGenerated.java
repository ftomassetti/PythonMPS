package PythonMPS.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.DefaultSimpleSubstituteAction;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class QueriesGenerated {
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_EmptyLine_4216866158438086124(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x3a85516ddf10934dL, "PythonMPS.structure.IntegerLiteral").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode literal = SNodeFactoryOperations.replaceWithNewChild(_context.getCurrentTargetNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x3a85516ddf10934dL, "PythonMPS.structure.IntegerLiteral")));
            SPropertyOperations.set(literal, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x3a85516ddf10934dL, 0x3a85516ddf10934eL, "value"), "" + (Integer.parseInt(pattern)));
            return literal;
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            return (pattern != null && pattern.length() > 0) && pattern.matches("^-?\\d+$");
          }
          public String getDescriptionText(String pattern) {
            return "integer " + pattern;
          }
        });
      }
    }
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x179e8736dc51c7eL, "PythonMPS.structure.VarDecl").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode varDecl = SNodeFactoryOperations.replaceWithNewChild(_context.getCurrentTargetNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x179e8736dc51c7eL, "PythonMPS.structure.VarDecl")));
            SPropertyOperations.set(varDecl, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), pattern);
            return varDecl;
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(final String pattern, boolean strictly) {
            Iterable<SAbstractConcept> concreteSubConcepts = ListSequence.fromList(SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba0bL, "PythonMPS.structure.Statement"), _context.getModel())).where(new IWhereFilter<SAbstractConcept>() {
              public boolean accept(SAbstractConcept it) {
                return !(it.isAbstract());
              }
            });
            return (pattern != null && pattern.length() > 0) && Sequence.fromIterable(concreteSubConcepts).all(new IWhereFilter<SAbstractConcept>() {
              public boolean accept(SAbstractConcept it) {
                return !(SConceptOperations.conceptAlias(it).startsWith(pattern));
              }
            });
          }
          public String getDescriptionText(String pattern) {
            return "variable declaration " + pattern;
          }
        });
      }
    }
    return result;
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Expression_4216866158438032957(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x179e8736dc51c7eL, "PythonMPS.structure.VarDecl").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode varDecl = SNodeFactoryOperations.replaceWithNewChild(_context.getCurrentTargetNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x179e8736dc51c7eL, "PythonMPS.structure.VarDecl")));
            SPropertyOperations.set(varDecl, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), pattern);
            return varDecl;
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(final String pattern, boolean strictly) {
            Iterable<SAbstractConcept> concreteSubConcepts = ListSequence.fromList(SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba0fL, "PythonMPS.structure.Expression"), _context.getModel())).where(new IWhereFilter<SAbstractConcept>() {
              public boolean accept(SAbstractConcept it) {
                return !(it.isAbstract());
              }
            });
            return (pattern != null && pattern.length() > 0) && Sequence.fromIterable(concreteSubConcepts).all(new IWhereFilter<SAbstractConcept>() {
              public boolean accept(SAbstractConcept it) {
                return !(SConceptOperations.conceptAlias(it).startsWith(pattern));
              }
            });
          }
          public String getDescriptionText(String pattern) {
            return "variable declaration " + pattern;
          }
        });
      }
    }
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x3a85516ddf10934dL, "PythonMPS.structure.IntegerLiteral").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode literal = SNodeFactoryOperations.replaceWithNewChild(_context.getCurrentTargetNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x3a85516ddf10934dL, "PythonMPS.structure.IntegerLiteral")));
            SPropertyOperations.set(literal, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x3a85516ddf10934dL, 0x3a85516ddf10934eL, "value"), "" + (Integer.parseInt(pattern)));
            return literal;
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            return (pattern != null && pattern.length() > 0) && pattern.matches("^-?\\d+$");
          }
          public String getDescriptionText(String pattern) {
            return "integer " + pattern;
          }
        });
      }
    }
    return result;
  }
  public static List<SubstituteAction> nodeSubstituteActionsBuilder_ActionsFactory_Statement_4512414453288919932(final IOperationContext operationContext, final NodeSubstituteActionsFactoryContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x3a85516ddf10934dL, "PythonMPS.structure.IntegerLiteral").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode literal = SNodeFactoryOperations.replaceWithNewChild(_context.getCurrentTargetNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x3a85516ddf10934dL, "PythonMPS.structure.IntegerLiteral")));
            SPropertyOperations.set(literal, MetaAdapterFactory.getProperty(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x3a85516ddf10934dL, 0x3a85516ddf10934eL, "value"), "" + (Integer.parseInt(pattern)));
            return literal;
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(String pattern, boolean strictly) {
            return (pattern != null && pattern.length() > 0) && pattern.matches("^-?\\d+$");
          }
          public String getDescriptionText(String pattern) {
            return "integer " + pattern;
          }
        });
      }
    }
    {
      SNode outputConcept = MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x179e8736dc51c7eL, "PythonMPS.structure.VarDecl").getDeclarationNode();
      SNode childConcept = (SNode) _context.getChildConcept();
      if (outputConcept == null || SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(outputConcept))) {
        ListSequence.fromList(result).addElement(new DefaultSimpleSubstituteAction(outputConcept, _context.getParentNode(), _context.getCurrentTargetNode(), _context.getChildSetter()) {
          public SNode createChildNode(Object parameterObject, SModel model, String pattern) {
            SNode varDecl = SNodeFactoryOperations.replaceWithNewChild(_context.getCurrentTargetNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x179e8736dc51c7eL, "PythonMPS.structure.VarDecl")));
            SPropertyOperations.set(varDecl, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), pattern);
            return varDecl;
          }
          public boolean hasSubstitute() {
            return true;
          }
          public boolean canSubstitute_internal(final String pattern, boolean strictly) {
            Iterable<SAbstractConcept> concreteSubConcepts = ListSequence.fromList(SConceptOperations.getAllSubConcepts(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d7f2c2bf32cba0bL, "PythonMPS.structure.Statement"), _context.getModel())).where(new IWhereFilter<SAbstractConcept>() {
              public boolean accept(SAbstractConcept it) {
                return !(it.isAbstract());
              }
            });
            return (pattern != null && pattern.length() > 0) && Sequence.fromIterable(concreteSubConcepts).all(new IWhereFilter<SAbstractConcept>() {
              public boolean accept(SAbstractConcept it) {
                return !(SConceptOperations.conceptAlias(it).startsWith(pattern));
              }
            });
          }
          public String getDescriptionText(String pattern) {
            return "variable declaration " + pattern;
          }
        });
      }
    }
    return result;
  }
}
