package PythonRuntime.code;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;
import java.io.File;
import jetbrains.mps.project.PathMacros;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import org.jetbrains.mps.openapi.model.SNode;
import PythonMPS.behavior.Package__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Comparator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class PythonPackagesImporter {

  private List<String> runScript(String scriptName, List<String> params) {
    List<String> output = ListSequence.fromList(new LinkedList<String>());

    File pythonScriptsDir = new File(PathMacros.getInstance().getValue("python_scripts"));
    File script = new File(pythonScriptsDir.getPath() + File.separator + scriptName);

    // set up the command and parameter 
    String[] cmd = new String[2 + ListSequence.fromList(params).count()];
    cmd[0] = "python";
    cmd[1] = script.getAbsolutePath();
    for (int i = 0; i < ListSequence.fromList(params).count(); i++) {
      cmd[2 + i] = ListSequence.fromList(params).getElement(i);
    }

    // create runtime to execute external command 
    Runtime rt = Runtime.getRuntime();
    try {
      Process pr = rt.exec(cmd);
      pr.waitFor();

      BufferedReader bfr = new BufferedReader(new InputStreamReader(pr.getInputStream()));
      String line = "";
      while ((line = bfr.readLine()) != null) {
        ListSequence.fromList(output).addElement(line);
      }

      BufferedReader bfrError = new BufferedReader(new InputStreamReader(pr.getErrorStream()));
      String lineErrir = "";
      while ((lineErrir = bfrError.readLine()) != null) {
        // display each output line form python script 
        System.out.println(lineErrir);
      }

    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (InterruptedException e) {
      System.out.println(e.getMessage());
    }
    return output;
  }

  public void importPackageContents(SNode pack) {
    for (String line : runScript("package_contents.py", ListSequence.fromListAndArray(new LinkedList<String>(), Package__BehaviorDescriptor.qualifiedName_id4O4oHuBfhpJ.invoke(pack)))) {
      System.out.println(line);
    }

  }
  public void importSubPackages(SNode pack) {
    for (String line : runScript("subpackages_lister.py", ListSequence.fromListAndArray(new LinkedList<String>(), SPropertyOperations.getString(pack, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"))))) {
      Package__BehaviorDescriptor.createSubpackageByQname_id4O4oHuBfALD.invoke(pack, ((line == null ? null : line.trim())));
    }
  }

  public void importPackages(SNode packagesImporter) {
    System.out.println("importPackage: started");
    ListSequence.fromList(SLinkOperations.getChildren(packagesImporter, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a72f9fbfL, 0x4d0462d7a73028ccL, "packages"))).clear();
    List<String> topPackages = runScript("packages_lister.py", ListSequence.fromList(new LinkedList<String>()));
    topPackages = ListSequence.fromList(topPackages).sort(new Comparator<String>() {
      public int compare(String a, String b) {
        return a.compareTo(b);
      }
    }, true).toListSequence();
    for (String line : topPackages) {
      SNode pack = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a73028c9L, "PythonMPS.structure.Package")));
      SPropertyOperations.set(pack, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), ((line == null ? null : line.trim())));
      ListSequence.fromList(SLinkOperations.getChildren(packagesImporter, MetaAdapterFactory.getContainmentLink(0x60430e8de6e24ceeL, 0x94b3c079312926d6L, 0x4d0462d7a72f9fbfL, 0x4d0462d7a73028ccL, "packages"))).addElement(pack);
    }
  }
}
